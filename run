#!/usr/bin/env bash

EXE="./target/debug/ece461_team19_cli"

if [[ "$1" == "build" ]]; then
    # build program
    cargo build
elif [[ "$1" == "install" ]]; then
    # install test dependencies
    rustup component add llvm-tools-preview
    cargo install cargo-binutils
elif [[ "$1" == "test" ]]; then
    # check for github token
    if [[ "$GITHUB_TOKEN" == "" ]]; then
        echo "Please supply \$GITHUB_TOKEN for the correct test result"
        exit
    fi

    # remove files of previous tests
    rm -f *.profraw
    rm -f *.profdata
    rm -f cargo_test.out
    rm -f test_result.out
    rm -f line_result.out

    # run tests
    RUSTFLAGS="-C instrument-coverage" cargo test --tests --message-format=json --no-run ece461_team19_cli > cargo_test.out
    TEST_EXE=$(tail -2 cargo_test.out | head -1 | sed 's/.*"executable":"\([^"]*\)".*/\1/')
    "$TEST_EXE" --logfile=./test_result.out

    # merge coverage data
    rust-profdata merge -sparse *.profraw -o line_result.profdata
    rust-cov export -format=text -summary-only "$TEST_EXE" \
        --instr-profile=line_result.profdata \
        --ignore-filename-regex=/.cargo/registry \
        --ignore-filename-regex=/rustc \
        > ./line_result.out

    # process test result
    [[ -f "$EXE" ]] || "$0" build
    "$EXE" report ./test_result.out ./line_result.out
else
    # parse url file
    "$EXE" url $1
fi
